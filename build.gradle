import org.apache.tools.ant.taskdefs.condition.Os

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {


        kotlin_version = '1.4.32'
        version_navigation = "2.3.5"
        version_constraintlayout = "2.0.4"
        version_material = "1.3.0"
        version_androidx_core = "1.5.0"
        version_androidx_appcompat = "1.3.0"
        version_room = "2.2.5"
        version_lifecycle_extensions = "2.3.1"
        version_timber = "4.7.1"
        version_kotlin_coroutines = "1.5.0"
        version_moshi = "1.9.2"
        version_retrofit = "2.7.1"
        version_retrofit_coroutines_adapter = "0.9.2"
        version_okhttp_logging = "4.2.1"
        version_picasso = "2.5.2"
        version_circle_image_view = "3.1.0"
        version_google_services = "4.3.3"
        version_firabase_crashlytics_gradle = '2.5.2'
        version_koin = "2.2.2"
        version_firebase = "28.0.1"
        version_paging = "3.0.0"
        version_coroutine_support_firebase = "1.3.7"

        //Testing libraries version
        version_fragment = '1.3.4'
        version_androidXTestCore = '1.3.0'
        version_androidx_expresso = "3.3.0"
        version_mock = "3.2.0"
        version_androidx_junit = "1.1.2"
        version_junit = "4.13.2"
        version_truth = "1.1.3"


        libs = [
                koinCore: ('org.koin:koin-core:' + version_koin),
                timber  : ('com.jakewharton.timber:timber:' + version_timber)

        ]
    }
    repositories {
        google()
        mavenCentral()


    }
    dependencies {
        classpath "com.google.gms:google-services:$version_google_services"

        // Add the Crashlytics Gradle plugin.
        classpath "com.google.firebase:firebase-crashlytics-gradle:$version_firabase_crashlytics_gradle"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

    }
}

allprojects {
    repositories {
        google()
        mavenCentral()

    }
}

task installGitHook(type: Copy) {
    def suffix = "linux"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        suffix = "windows"

    from new File(rootProject.rootDir, "scripts/pre-commit-$suffix")
    into { new File(rootProject.rootDir, '.git/hooks') }
    rename("pre-commit-$suffix", 'pre-commit')
    fileMode 0775
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook


task clean(type: Delete) {
    delete rootProject.buildDir
}