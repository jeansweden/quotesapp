package plugins

apply<JacocoPlugin>()


tasks.withType<Test> {
    configure<JacocoTaskExtension> {
        isIncludeNoLocationClasses = true //For including Robolectric tests
        excludes = mutableListOf("jdk.internal.*")
    }
}

configure<JacocoPluginExtension> {
    this.toolVersion = Versions.jacoco
}

val fileFilter = mutableSetOf(
    "**/R.class",
    "**/R\$*.class",
    "**/BuildConfig.*",
    "**/Manifest*.*",
    "**/*Test*.*",
    "android/**/*.*",
    "**/di/**",
    "**/*JsonAdapter.*", // adapters generated by moshi
    "**/*\$Lambda$*.*", // Jacoco can not handle several "$" in class name.
    "**/*\$inlined$*.*" // Kotlin specific, Jacoco can not handle several "$" in class name.
)

val classDirectoriesTree = fileTree(project.buildDir) {
    include(
        "**/classes/**/main/**",
        "**/intermediates/classes/debug/**",
        "**/intermediates/javac/debug/*/classes/**", // Android Gradle Plugin 3.2.x support.
        "**/tmp/kotlin-classes/debug/**"
    )

    exclude(fileFilter)
}

val sourceDirectoriesTree = files(
    "$projectDir/src/main/java",
    "$projectDir/src/main/kotlin",
    "$projectDir/src/debug/java",
    "$projectDir/src/debug/kotlin"

)
val executionDataTree = fileTree(project.buildDir) {
    include(
        "outputs/code_coverage/**/*.ec",
        "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    )
}

fun JacocoReport.createNewTestTask(
    description: String,
    vararg dependOnTasks: Any
) {
    group = "verification"
    this.description = description
    dependsOn(dependOnTasks)
    reports {
        html.isEnabled = true
    }
    sourceDirectories.setFrom(sourceDirectoriesTree)
    classDirectories.setFrom(classDirectoriesTree)
    executionData.setFrom(executionDataTree)
}


val unitTestTask = "testDebugUnitTest"
val androidTestTask = "createDebugCoverageReport"

tasks.register<JacocoReport>("androidTestReport") {
    createNewTestTask(
        description = "Code coverage report for both Android and Unit tests.",
        dependOnTasks = arrayOf(androidTestTask, unitTestTask)
    )
}

tasks.register<JacocoReport>("unitTestReport") {
    createNewTestTask(
        description = "Code coverage report for Unit tests.",
        dependOnTasks = arrayOf(unitTestTask)
    )
}

// This is added for solving jacoco bug
configurations.all {
    resolutionStrategy {
        eachDependency {
            if (this.requested.group == "org.jacoco") {
                this.useVersion(Versions.jacoco)
            }
        }
    }
}

